set -g status-keys emacs
setw -g mode-keys vi
set-option -g status-position top

set -g default-terminal "${TERM}"
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# set usual scrolling
set -g mouse on
set -s escape-time 0

# set -g status-style 'bg=#333333 fg=#5eacd3'

bind r source-file ~/.tmux.conf

# Appearance
set -g base-index 1
set -g status-left ''
set -g status-right ''
set -g status-bg '#7FFFD4'

setw -g automatic-rename on
setw -g window-status-format '#(tmux display-message -p "#{window_name}" | cut -c 1-30)'
setw -g automatic-rename-format "#{b:pane_current_path}"

set -g window-status-current-style "bg=default,reverse"
set -g window-status-separator ''  # No spaces between windows in the status bar.
set -g window-status-format "#{?window_start_flag,, }#I:#W#{?window_flags,#F, } "
set -g window-status-current-format "#{?window_start_flag,, }#I:#W#{?window_flags,#F, } "

bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# Focus events enabled for terminals that support them
set -g focus-events on

# Super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# vim-like pane switching
bind -r ^ last-window
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R

bind -r t neww -c "#{pane_current_path}" "[[ -e TODO.md ]] && nvim TODO.md || nvim ~/.dotfiles/target-home/Workspace/todo.md"

bind -r i run-shell "sh ~/.local/bin/open-new-tmux-window.sh Cheatsheet ~/.local/bin/tmux-cht.sh"
bind -r f run-shell "sh ~/.local/bin/open-new-tmux-window.sh NewSession ~/.local/bin/tmux-sessionizer.sh"
bind -n C-n run-shell "tmux display-message -p '#{pane_current_command}' | grep -iq 'nvim' && tmux send-keys C-n || tmux send-keys 'nvim .' Enter"
bind -n C-t run-shell "tmux display-message -p '#{pane_current_command}' | grep -iq 'nvim' && tmux send-keys C-t || tmux new-window -c '#{pane_current_path}'"

# To jump back to a nvim window
bind -n C-S-t run-shell "bash tmux-set-last-window-for-nvim.sh ; tmux select-window -t $(bash tmux-find-nvim-window.sh)"

# Switch through windows with C-Tab only if we are not running nvim
bind -n C-Tab run-shell "tmux display-message -p '#{pane_current_command}' | grep -iq 'nvim' && tmux send-keys C-Tab || $(bash tmux-set-last-window-for-nvim.sh ; tmux next-window)"
bind -n C-S-Tab run-shell "tmux display-message -p '#{pane_current_command}' | grep -iq 'nvim' && tmux send-keys C-S-Tab || $(bash tmux-set-last-window-for-nvim.sh ; tmux previous-window)"

bind -n C-S-f send-keys C-S-f

# Example how to launch a project with a key combination
bind -r g send-keys "sh ~/.local/bin/tmux-sessionizer.sh ~/Workspace/os-as-ide" Enter
